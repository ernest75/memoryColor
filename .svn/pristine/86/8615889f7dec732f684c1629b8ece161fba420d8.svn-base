package com.course.memorycolor;

import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.TypedArray;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Handler;
import android.preference.PreferenceManager;
import android.support.v4.content.res.ResourcesCompat;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Button;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.Random;

public class GameScreen extends AppCompatActivity {


    //States of the game
    enum GameState {
        GameInactive, GameAnimating, GameUserPlay
    }

    //Difficulty levels
    enum GameDifficulty {
        GameEasy, GameMedium, GameHard
    }

    //Variables member

    //Declaration of MediaPlayer objects as private here to be able to acces it outside oncreate()
    private MediaPlayer mpRightAnswer;
    private MediaPlayer mpWrongAnswer;

    //Array list that holds the sequence of colors to be shown
    ArrayList<Integer> mColorSequence = new ArrayList<Integer>();

    //Int that keeps the number of buttons clicked by the user, it's used to compare it with the index
    // of the array of colors to known if the color it's the right one or not
    int mNumClicksUser = 0;

    //Variable that tels us the state of the game, initialized in inactive state
    GameState mState = GameState.GameInactive;

    //Variable that tels us the difficulty of the game, initialized on easy level by default
    GameDifficulty mDifficulty = GameDifficulty.GameEasy;

    //These set of variables are related to the animations and are initialized as on easy level by default
    //the number of animations
    int mNumberOfAnimations = 2;

    //These three ints are related aswell and basically they determine the time that the buttons animations
    //will take. They have to comply the rule mChangeButtonColorToOn + mAnimationsTime > mChangeButtonColorToOff.
    //int that determines when the next set of animations will take part in ms
    int mAnimationsTime = 1100;
    //int that determines when ,in ms, the color of the button will change to the color version selected
    int mChangeButtonColorToOn = 1500;
    //int that determines , in ms, when the color of the button will return to his default state
    int mChangeButtonColorToOff = 2500;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_game_screen);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);


        //Variable that tels us the state of the game, initialized in inactive state
        mState = GameState.GameInactive;

        //Initialization of MediaPLayer objects with the sounds to be reproduced either when the user response
        //is correct or not  
        mpRightAnswer = MediaPlayer.create(this, R.raw.right_answer);
        mpWrongAnswer = MediaPlayer.create(this, R.raw.wrong_answer);

        //setting references to the buttons
        final Button btnRed = (Button) findViewById(R.id.btn_red);
        final Button btnBlue = (Button) findViewById(R.id.btn_blue);
        final Button btnGreen = (Button) findViewById(R.id.btn_green);
        final Button btnCyan = (Button) findViewById(R.id.btn_cyan);
        final Button btnPink = (Button) findViewById(R.id.btn_pink);
        final Button btnYellow = (Button) findViewById(R.id.btn_yellow);

        //setting onClickListeners 4 all buttons
        btnRed.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                int colorNumber = Integer.parseInt(v.getTag().toString());
                colorBtnClicked(colorNumber);
            }
        });
        btnBlue.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                int colorNumber = Integer.parseInt(v.getTag().toString());
                colorBtnClicked(colorNumber);
            }
        });
        btnGreen.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                int colorNumber = Integer.parseInt(v.getTag().toString());
                colorBtnClicked(colorNumber);
            }
        });

        btnCyan.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                int colorNumber = Integer.parseInt(v.getTag().toString());
                colorBtnClicked(colorNumber);
            }
        });
        btnPink.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                int colorNumber = Integer.parseInt(v.getTag().toString());
                colorBtnClicked(colorNumber);
            }
        });

        btnYellow.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                int colorNumber = Integer.parseInt(v.getTag().toString());
                colorBtnClicked(colorNumber);
            }
        });


    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_game_screen, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_options) {
            Intent intent = new Intent(this, SettingsActivity.class);
            startActivity(intent);
            return true;


        } else if (id == R.id.action_new_game) {
            mNumberOfAnimations = getStaringAnimations();
            gameAnimation();
        }

        return super.onOptionsItemSelected(item);
    }

    public int getStaringAnimations() {
        if (mDifficulty == GameDifficulty.GameEasy) {
            return 2;
        } else if (mDifficulty == GameDifficulty.GameMedium) {
            return 3;
        }

        return 4;
    }

    public void gameAnimation() {

        mState = GameState.GameAnimating;


        //Take reference of all the buttons on the layout
        final Button btnRed = (Button) findViewById(R.id.btn_red);
        final Button btnBlue = (Button) findViewById(R.id.btn_blue);
        final Button btnGreen = (Button) findViewById(R.id.btn_green);
        final Button btnCyan = (Button) findViewById(R.id.btn_cyan);
        final Button btnPink = (Button) findViewById(R.id.btn_pink);
        final Button btnYellow = (Button) findViewById(R.id.btn_yellow);

        //Array to store all the buttons
        final ArrayList<Button> btnArray = new ArrayList<>();

        //Storage of the buttons
        btnArray.add(btnRed);
        btnArray.add(btnBlue);
        btnArray.add(btnGreen);
        btnArray.add(btnCyan);
        btnArray.add(btnPink);
        btnArray.add(btnYellow);

        //Get the arraycolors
        // final int [] drawablesOff = getBaseContext().getResources().getIntArray(R.array.drawables_off);
        final int[] colorsOn = getBaseContext().getResources().getIntArray(R.array.colorsOn);
        final TypedArray drawablesOff = getResources().obtainTypedArray(R.array.drawables_off);

        //Creation of the object Random
        Random rand = new Random();


        //calculating sequence
        if (mNumberOfAnimations == getStaringAnimations()) {
            for (int i = 0; i < mNumberOfAnimations; i++) {
                //Int to determine witch button it's going to be on sequence randomly
                int random = getNextRandomColor(rand);
                mColorSequence.add(random);

            }
        } else {
            int random = getNextRandomColor(rand);
            mColorSequence.add(random);


        }

        //Creating animations handler
        for (int i = 0; i < mNumberOfAnimations; i++) {
            final int indexOfColorSeq = i;
            final Handler handler = new Handler();
            handler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    btnArray.get(mColorSequence.get(indexOfColorSeq)).setBackgroundColor(colorsOn[mColorSequence.get(indexOfColorSeq)]);

                }
            }, i * mAnimationsTime + mChangeButtonColorToOn);

            final Handler handler2 = new Handler();
            handler2.postDelayed(new Runnable() {
                @Override
                public void run() {
                    btnArray.get(mColorSequence.get(indexOfColorSeq)).setBackground(ResourcesCompat.getDrawable(getResources()
                            , drawablesOff.getResourceId(mColorSequence.get(indexOfColorSeq), 0), null));
                }
            }, i * mAnimationsTime + mChangeButtonColorToOff);
        }

        Handler handlerChangeState = new Handler();
        handlerChangeState.postDelayed(new Runnable() {
            @Override
            public void run() {
                mState = GameState.GameUserPlay;
            }
        }, (mNumberOfAnimations - 1) * mAnimationsTime + mChangeButtonColorToOff);


    }

    private int getNextRandomColor(Random rand) {
        int random = rand.nextInt(6);
        if (mColorSequence.size() > 0) {
            if (random == mColorSequence.get(mColorSequence.size() - 1)) {
                while (random == mColorSequence.get(mColorSequence.size() - 1)) {
                    random = rand.nextInt(6);
                }

            }
        }
        return random;
    }


    private void colorBtnClicked(int colorNumber) {
        if (mState != GameState.GameUserPlay) {
            return;
        }


        if (mColorSequence.get(mNumClicksUser) == colorNumber) {
            final Toast toast = Toast.makeText(getBaseContext(), "Correct color", Toast.LENGTH_SHORT);
            toast.show();
            Handler handler = new Handler();
            handler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    toast.cancel();
                }
            }, 500);
            mpRightAnswer.start();

            mNumClicksUser++;
            if (mColorSequence.size() == mNumClicksUser) {
                mNumberOfAnimations++;
                mNumClicksUser = 0;
                gameAnimation();

            }

        } else {
            Toast.makeText(getBaseContext(), "That's not the color m8!!!, Sorry :(  Game over!!", Toast.LENGTH_SHORT).show();
            mState = GameState.GameInactive;

            mpWrongAnswer.start();
            //resetting values of the game
            mNumberOfAnimations = getStaringAnimations();
            mNumClicksUser = 0;
            mColorSequence.clear();
        }

        Log.e("Valor tag", Integer.toString(colorNumber));
    }

    //Todo: Investigar com crear sharedpreferences per primera vegada quant el device no te encara la aplicacio

    @Override
    protected void onResume() {
        super.onResume();

        // To use the preferences when the activity starts and when the user navigates back from the settings activity.
        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);

        String difficulty = preferences.getString("level", null);


        if (difficulty.compareTo("Easy") == 0) {
            mDifficulty = GameDifficulty.GameEasy;
            mChangeButtonColorToOn = 1500;
            mChangeButtonColorToOff = 2500;
            mAnimationsTime = 1100;

        } else if (difficulty.compareTo("Medium") == 0) {
            mDifficulty = GameDifficulty.GameMedium;
            mAnimationsTime = 800;
            mChangeButtonColorToOn = 1000;
            mChangeButtonColorToOff = 1700;
        } else if (difficulty.compareTo("Hard") == 0) {
            mDifficulty = GameDifficulty.GameHard;
            mChangeButtonColorToOn = 1000;
            mChangeButtonColorToOff = 1500;
            mAnimationsTime = 600;
        } else {
            mDifficulty = GameDifficulty.GameEasy;
            mAnimationsTime = 1100;
            mChangeButtonColorToOn = 1500;
            mChangeButtonColorToOff = 2500;
        }


    }
}




